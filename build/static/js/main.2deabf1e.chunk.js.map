{"version":3,"sources":["components/Filter.js","components/AddPerson.js","components/Message.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["filter","handleFilter","onSubmit","e","preventDefault","type","value","onChange","handleSubmit","newName","handleNewName","newNumber","handleNewNumber","style","borderRadius","padding","color","border","backgroundColor","styleErr","Message","message","isErr","txt","baseUrl","axios","get","then","res","data","personObject","post","id","put","delete","console","log","Numbers","persons","handleDelete","person","name","includes","map","key","number","onClick","App","useState","setPersons","setNewName","setNewNumber","setFilter","setMessage","useEffect","a","personService","personsAll","setTimeout","localPerson","find","returnedPerson","p","catch","err","handleChange","setFn","target","Filter","AddPerson","window","confirm","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.2deabf1e.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function ({ filter, handleFilter }) {\n  return (\n    <form onSubmit={(e) => e.preventDefault()}>\n      <div>filter shown with: </div>\n      <input type=\"text\" value={filter} onChange={handleFilter} />\n    </form>\n  );\n}","import React from \"react\";\n\nexport default function ({\n  handleSubmit,\n  newName,\n  handleNewName,\n  newNumber,\n  handleNewNumber\n}) {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <div>name</div>\n        <input type=\"text\" value={newName} onChange={handleNewName} />\n      </div>\n      <div>\n        <div>number</div>\n        <input type=\"tel\" value={newNumber} onChange={handleNewNumber} />\n      </div>\n      <button type=\"submit\">add</button>\n    </form>\n  );\n}\n","import React from 'react';\n\nconst style = {\n  borderRadius: '5',\n  padding: '8px',\n  color: 'green',\n  border: '1px solid green',\n  backgroundColor: '#d1e6cb'\n}\n\nconst styleErr = {\n  ...style,\n  color: 'red',\n  border: '1px solid red',\n  backgroundColor: '#f0c4c4'\n}\n\nconst Message = ({ message }) => {\n  if(!message) return null;\n  return (\n    <div style={message.isErr ? styleErr : style}>{message.txt}</div>\n  )\n}\n\nexport default Message;","import axios from 'axios';\n\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  return axios.get(baseUrl)\n    .then(res => {\n      return res.data;\n    })\n}\n\nconst getById = (id) => {\n  return axios.get(`${baseUrl}/${id}`)\n    .then(res => {\n      return res.data;\n    })\n}\n\nconst create = (personObject) => {\n  let req = axios.post(baseUrl, personObject)\n  return req.then(res => res.data)\n}\n\nconst update = (id, personObject) => {\n  return axios.put(`${baseUrl}/${id}`, personObject)\n    .then(res => res.data)\n}\n\nconst deleteById = (id) => {\n  let req = axios.delete(`${baseUrl}/${id}`)\n  req.then(res => console.log(res));\n}\n\nexport default { getAll, getById, create, update, deleteById }","import React, { useState, useEffect } from \"react\";\nimport Filter from \"./components/Filter\";\nimport AddPerson from \"./components/AddPerson\";\nimport Message from \"./components/Message\";\nimport personService from \"./services/persons\";\nimport \"./index.css\"\n\nconst Numbers = ({ persons, filter, handleDelete }) => {\n  return (\n    <section>\n      <h2>Numbers</h2>\n      <ul>\n        {persons\n          .filter((person) => person.name.includes(filter))\n          .map((person) => {\n            return (\n              <li key={person.id}>\n                {person.name} {person.number}\n                <button onClick={() => handleDelete(person)}>delete</button>\n              </li>\n            )\n          })\n        }\n      </ul>\n    </section>\n  );\n};\n\nconst App = () => {\n  const [persons, setPersons] = useState([\n    { name: \"Arto Hellas\", number: \"44\", id: 1 },\n    { name: \"Arto Helfas\", number: \"45\", id: 2 },\n    { name: \"ArtoHelfas\", number: \"45\", id: 3 }\n  ]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [filter, setFilter] = useState(\"\");\n  const [message, setMessage] = useState(null);\n\n  useEffect(() => {\n    (async function() {\n      try {\n        let personsAll = await personService.getAll()\n        setPersons(personsAll)\n      } catch(err) {\n        console.log(err);\n        \n        setMessage({ txt: `Could not retrieve information from database`, isErr: true });\n        setTimeout(() => {\n          setMessage(null);\n        }, 5000)\n      }\n    })()\n  }, [])\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const personObject = { name: newName, number: newNumber };\n\n    const localPerson = persons.find((person) => person.name === newName);\n\n    // Problem: if person by name already exists by name in db but not locally, \n    // this step cannot detect and will make a POST instead of PUT\n    if(!!localPerson) {\n      personService.update(localPerson.id, personObject)\n        .then(returnedPerson => {\n          setPersons(persons.map(p => p.id === returnedPerson.id ? returnedPerson : p))\n\n          setMessage({ txt: `${returnedPerson.name} updated.`, isErr: false });\n          setTimeout(() => {\n            setMessage(null);\n          }, 5000)\n        })\n        .catch(err => {\n          console.log(err);\n          setMessage({ txt: `${localPerson.name} does not exist in database`, isErr: true });\n          setTimeout(() => {\n            setMessage(null);\n          }, 5000)\n\n          personService.getAll()\n            .then((personsAll) => {\n              setPersons(personsAll)\n            })\n        })\n    } else {\n      personService.create(personObject)\n        .then(returnedPerson => {\n          setPersons([...persons, returnedPerson])\n        })\n    }\n\n    setNewName(\"\");\n    setNewNumber(\"\");\n  };\n\n  const handleChange = (setFn) => {\n    return (e) => {\n      setFn(e.target.value);\n    };\n  };\n\n  const handleDelete = (person) => {\n    if (window.confirm(`Do you want to delete ${person.name}?`)) {\n      personService.deleteById(person.id);\n      setPersons(persons.filter(p => p.id !== person.id));\n    }\n  }\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Filter filter={filter} handleFilter={handleChange(setFilter)} />\n      <h2>Add a new</h2>\n      <AddPerson\n        newName={newName}\n        newNumber={newNumber}\n        handleNewName={handleChange(setNewName)}\n        handleNewNumber={handleChange(setNewNumber)}\n        handleSubmit={handleSubmit}\n      />\n      <Message message={message} />\n      <Numbers persons={persons} filter={filter} handleDelete={handleDelete}/>\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}